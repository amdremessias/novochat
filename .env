# Aprenda sobre as diversas variáveis de ambiente em
# https://www.chatwoot.com/docs/self-hosted/configuration/environment-variables/#rails-production-variables

# Usado para verificar a integridade dos cookies assinados. Portanto, garanta que um valor seguro seja definido.
# SECRET_KEY_BASE deve ser alfanumérico. Evite caracteres especiais ou símbolos.
# Use `rake secret` para gerar esta variável
SECRET_KEY_BASE=BQef4IaVnba1M0IPWqjaDKpLt9fuChYA8nzscwqRsU=

# Substitua pela URL que você planeja usar para sua aplicação
# Ajustado para usar seu host.novochat.internal
#FRONTEND_URL=http://host.novochat.internal:3000
FRONTEND_URL=https://host.novochat.internal:3000
# Para usar uma URL dedicada para as páginas da central de ajuda
#HELPCENTER_URL=http://host.novochat.internal:3000
HELPCENTER_URL=https://host.novochat.internal:3000

# Se a variável estiver definida, todas as páginas não autenticadas retornarão para o local padrão.
# Sempre que uma nova conta for criada, o idioma padrão será DEFAULT_LOCALE em vez de en.
# DEFAULT_LOCALE=en

# Se você planeja usar CDN para seus assets, defina o Host do CDN de Assets
# Ajustado para usar seu host.novochat.internal
ASSET_CDN_HOST=https://host.novochat.internal

# Força todo o acesso ao aplicativo por SSL, o padrão é false
FORCE_SSL=false

# Isso permite controlar novos cadastros em sua instalação Chatwoot
# true: opção padrão, permite cadastros
# false: desabilita todos os endpoints relacionados a cadastros
# api_only: desabilita a UI para cadastro, mas você pode criar cadastros via APIs de conta
ENABLE_ACCOUNT_SIGNUP=true

# Configurações do Redis
# Especifique as configurações via uma única URL ou variáveis individuais
# ref: https://www.iana.org/assignments/uri-schemes/prov/redis
# Você também pode usar o seguinte formato para a URL: redis://:password@host:port/db_number
# Ajustado para usar o serviço Redis dentro do Docker Compose, que estará disponível como 'redis' na rede Docker.
REDIS_URL=redis://redis:6379

# Se você estiver usando docker-compose, defina o valor desta variável como uma string,
# que será a senha para o serviço redis em execução dentro do docker-compose
# para torná-lo seguro.
# Importante: Defina uma senha forte aqui. Ela deve corresponder à senha esperada pelo serviço Redis.
REDIS_PASSWORD=uma_senha_muito_forte_aqui_123! # <--- **IMPORTANTE: TROQUE POR UMA SENHA ÚNICA E SEGURA!**

# Redis Sentinel pode ser usado passando uma lista de hosts e portas de sentinel, ex: sentinel_host1:port1,sentinel_host2:port2
REDIS_SENTINELS=
# O nome mestre do Redis sentinel é obrigatório ao usar sentinel, o valor padrão é "mymaster".
# Você pode encontrar a lista de mestres usando o comando "SENTINEL masters"
REDIS_SENTINEL_MASTER_NAME=

# Por padrão, o Chatwoot passará REDIS_PASSWORD como o valor da senha para os sentinels
# Use a seguinte variável de ambiente para personalizar senhas para sentinels.
# Use string vazia se os sentinels forem configurados sem senhas
# REDIS_SENTINEL_PASSWORD=

# Correção de quebra de Redis premium no heroku
# Habilite a seguinte configuração
# ref: https://github.com/chatwoot/chatwoot/issues/2420
# REDIS_OPENSSL_VERIFY_MODE=none

# Variáveis de configuração do Banco de Dados Postgres
# Você pode usar as variáveis separadas abaixo OU a DATABASE_URL.
# Se usar DATABASE_URL, comente as 4 linhas abaixo.
POSTGRES_DATABASE=chatwoot
POSTGRES_HOST=postgres
POSTGRES_USERNAME=postgres
POSTGRES_PASSWORD=BQef4IaVnba1M0IPWqja

# OU, use a DATABASE_URL. Comente as variáveis POSTGRES_ separadas acima se usar esta.
# IMPORTANTE: Garanta que esta URL corresponda às credenciais do seu serviço Postgres no compose.yml.
# O host 'postgres' se refere ao nome do serviço no Docker Compose.
# DATABASE_URL=postgresql://postgres:BQef4IaVnba1M0IPWqja@postgres:5432/chatwoot

RAILS_ENV=production
# Altera o limite de tempo limite de consulta do Postgres. O padrão é 14 segundos. Modifique apenas quando necessário.
# POSTGRES_STATEMENT_TIMEOUT=14s
RAILS_MAX_THREADS=5

# O e-mail do qual todos os e-mails de saída são enviados
# pode ser `email@seudominio.com` ou `Nome da Marca <email@seudominio.com>`
MAILER_SENDER_EMAIL=Chatwoot <mc.suporte@outlook.com>

# A chave de domínio SMTP é configurada para verificação HELO
SMTP_DOMAIN=chatwoot.com
# Defina o valor como "mailhog" se estiver usando docker-compose para ambientes de desenvolvimento,
# Defina o valor como "localhost" ou seu endereço SMTP em outros ambientes
# Se SMTP_ADDRESS estiver vazio, o Chatwoot tentará usar sendmail (postfix)
SMTP_ADDRESS=
SMTP_PORT=1025
SMTP_USERNAME=
SMTP_PASSWORD=
# plain,login,cram_md5
SMTP_AUTHENTICATION=
SMTP_ENABLE_STARTTLS_AUTO=true
# Pode ser: 'none', 'peer', 'client_once', 'fail_if_no_peer_cert', veja http://api.rubyonrails.org/classes/ActionMailer/Base.html
SMTP_OPENSSL_VERIFY_MODE=peer
# Comente as seguintes variáveis de ambiente se necessário pelo seu servidor SMTP
# SMTP_TLS=
# SMTP_SSL=
# SMTP_OPEN_TIMEOUT
# SMTP_READ_TIMEOUT

# E-mail de Entrada
# Este é o domínio definido para os e-mails de resposta quando a continuidade da conversa está habilitada
MAILER_INBOUND_EMAIL_DOMAIN=
# Defina este para o canal de entrada apropriado com relação aos e-mails recebidos
# Os valores possíveis são:
# relay para Exim, Postfix, Qmail
# mailgun para Mailgun
# mandrill para Mandrill
# postmark para Postmark
# sendgrid para Sendgrid
RAILS_INBOUND_EMAIL_SERVICE=
# Use um dos seguintes com base no serviço de entrada de e-mail
# Ref: https://edgeguides.rubyonrails.org/action_mailbox_basics.html
# Defina isso como uma senha de sua escolha e use-a no webhook de entrada
RAILS_INBOUND_EMAIL_PASSWORD=

MAILGUN_INGRESS_SIGNING_KEY=
MANDRILL_INGRESS_API_KEY=

# Criando suas instruções de webhook de entrada para Postmark e Sendgrid:
# Formato da URL do webhook de entrada:
#    https://actionmailbox:[SUA_RAILS_INBOUND_EMAIL_PASSWORD]@[SEU_CHATWOOT_DOMAIN.COM]/rails/action_mailbox/[RAILS_INBOUND_EMAIL_SERVICE]/inbound_emails
# Nota: Substitua os valores entre colchetes; não inclua os próprios colchetes.
# Exemplo: https://actionmailbox:mYRandomPassword3@chatwoot.example.com/rails/action_mailbox/postmark/inbound_emails
# Para Postmark
# Certifique-se de que a caixa de seleção 'Incluir conteúdo de e-mail bruto no payload JSON' esteja selecionada na seção de webhook de entrada.

# Armazenamento
ACTIVE_STORAGE_SERVICE=local

# Amazon S3
# documentação: https://www.chatwoot.com/docs/configuring-s3-bucket-as-cloud-storage
S3_BUCKET_NAME=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=

# Configurações de log
# Desative se quiser gravar logs em um arquivo
RAILS_LOG_TO_STDOUT=true
LOG_LEVEL=info
LOG_SIZE=500
# Configure esta variável de ambiente se quiser usar lograge em vez do logger do rails
#LOGRAGE_ENABLED=true

### Estas variáveis de ambiente são necessárias apenas se você estiver configurando canais de mídia social

# Facebook
# documentação: https://www.chatwoot.com/docs/facebook-setup
FB_VERIFY_TOKEN=
FB_APP_SECRET=
FB_APP_ID=

# https://developers.facebook.com/docs/messenger-platform/instagram/get-started#app-dashboard
IG_VERIFY_TOKEN=

# Twitter
# documentação: https://www.chatwoot.com/docs/twitter-app-setup
TWITTER_APP_ID=
TWITTER_CONSUMER_KEY=
TWITTER_CONSUMER_SECRET=
TWITTER_ENVIRONMENT=

# Integração com Slack
SLACK_CLIENT_ID=
SLACK_CLIENT_SECRET=

# Google OAuth
GOOGLE_OAUTH_CLIENT_ID=
GOOGLE_OAUTH_CLIENT_SECRET=
GOOGLE_OAUTH_CALLBACK_URL=

### Altere esta variável de ambiente apenas se estiver usando um aplicativo móvel personalizado
## Variáveis de ambiente do aplicativo móvel
IOS_APP_ID=L7YLMN4634.com.chatwoot.app
ANDROID_BUNDLE_ID=com.chatwoot.app

# https://developers.google.com/android/guides/client-auth (use keytool para imprimir a impressão digital na primeira seção)
ANDROID_SHA256_CERT_FINGERPRINT=AC:73:8E:DE:EB:56:EA:CC:10:87:02:A7:65:37:7B:38:D4:5D:D4:53:F8:3B:FB:D3:C6:28:64:1D:AA:08:1E:D8

### Smart App Banner
# https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html
# Você pode encontrar seu app-id em https://itunesconnect.apple.com
#IOS_APP_IDENTIFIER=1495796682

## Notificação Push
## Gere um novo valor de chave aqui: https://d3v.one/vapid-key-generator/
# VAPID_PUBLIC_KEY=
# VAPID_PRIVATE_KEY=
#
# para aplicativos móveis
# FCM_SERVER_KEY=

### Configurações de APM e Monitoramento de Erros
## Elastic APM
## https://www.elastic.co/guide/en/apm/agent/ruby/current/getting-started-rails.html
# ELASTIC_APM_SERVER_URL=
# ELASTIC_APM_SECRET_TOKEN=

## Sentry
# SENTRY_DSN=

## Scout
## https://scoutapm.com/docs/ruby/configuration
# SCOUT_KEY=SUACHAVE
# SCOUT_NAME=SEUNOMEDOAPP (Produção)
# SCOUT_MONITOR=true

## NewRelic
# https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/
# NEW_RELIC_LICENSE_KEY=
# Defina como true para permitir que o apm do newrelic envie logs.
# Isso está desativado por padrão.
# NEW_RELIC_APPLICATION_LOGGING_ENABLED=

## Datadog
## https://github.com/DataDog/dd-trace-rb/blob/master/docs/GettingStarted.md#environment-variables
# DD_TRACE_AGENT_URL=

# Chave de API MaxMindDB para baixar o banco de dados GeoLite2 City
# IP_LOOKUP_API_KEY=

## Configuração do Rack Attack
## Para prevenir e limitar requisições abusivas
# ENABLE_RACK_ATTACK=true
# RACK_ATTACK_LIMIT=300
# ENABLE_RACK_ATTACK_WIDGET_API=true
# Lista de IPs confiáveis separados por vírgulas que ignoram as regras de limitação do Rack Attack
# RACK_ATTACK_ALLOWED_IPS=127.0.0.1,::1,192.168.0.10

## Executando chatwoot como um servidor apenas de API
## Definir este valor como true desabilitará os endpoints do dashboard frontend
# CW_API_ONLY_SERVER=false

## Configuração Apenas para Desenvolvimento
# Se você quiser usar letter_opener para e-mails locais
# LETTER_OPENER=true
# Destinado a ser usado em github codespaces
# WEBPACKER_DEV_SERVER_PUBLIC=

# Se você quiser usar o aplicativo móvel oficial,
# as notificações serão retransmitidas através de um servidor Chatwoot
ENABLE_PUSH_RELAY_SERVER=true

# Chave de API do Stripe
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=

# Defina como true se você quiser fazer upload de arquivos para armazenamento em nuvem usando a URL assinada
# Certifique-se de seguir https://edgeguides.rubyonrails.org/active_storage_overview.html#cross-origin-resource-sharing-cors-configuration no armazenamento em nuvem após definir isso como true.
DIRECT_UPLOADS_ENABLED=

# Credenciais MS OAUTH
AZURE_APP_ID=
AZURE_APP_SECRET=

## Configurações avançadas
## Altere esses valores para ajustar o desempenho
# Controla a configuração de concorrência do sidekiq
# SIDEKIQ_CONCURRENCY=10

# Recursos com inteligência artificial
## Chave OpenAI
# OPENAI_API_KEY=

# Configurações relacionadas a manutenção/desempenho
# Defina como true se você quiser remover caixas de entrada de contatos obsoletas
# caixas de entrada de contatos sem conversas com mais de 90 dias serão removidas
# REMOVE_STALE_CONTACT_INBOX_JOB_STATUS=false
root@robot:/opt/novochat/chatwoot# ^C
root@robot:/opt/novochat/chatwoot# ^C
root@robot:/opt/novochat/chatwoot# ^C
root@robot:/opt/novochat/chatwoot# cat .env
# Aprenda sobre as diversas variáveis de ambiente em
# https://www.chatwoot.com/docs/self-hosted/configuration/environment-variables/#rails-production-variables

# Usado para verificar a integridade dos cookies assinados. Portanto, garanta que um valor seguro seja definido.
# SECRET_KEY_BASE deve ser alfanumérico. Evite caracteres especiais ou símbolos.
# Use `rake secret` para gerar esta variável
SECRET_KEY_BASE=BQef4IaVnba1M0IPWqjaDKpLt9fuChYA8nzscwqRsU=

# Substitua pela URL que você planeja usar para sua aplicação
# Ajustado para usar seu host.novochat.internal
#FRONTEND_URL=http://host.novochat.internal:3000
FRONTEND_URL=https://host.novochat.internal:3000
# Para usar uma URL dedicada para as páginas da central de ajuda
#HELPCENTER_URL=http://host.novochat.internal:3000
HELPCENTER_URL=https://host.novochat.internal:3000

# Se a variável estiver definida, todas as páginas não autenticadas retornarão para o local padrão.
# Sempre que uma nova conta for criada, o idioma padrão será DEFAULT_LOCALE em vez de en.
# DEFAULT_LOCALE=en

# Se você planeja usar CDN para seus assets, defina o Host do CDN de Assets
# Ajustado para usar seu host.novochat.internal
ASSET_CDN_HOST=https://host.novochat.internal

# Força todo o acesso ao aplicativo por SSL, o padrão é false
FORCE_SSL=false

# Isso permite controlar novos cadastros em sua instalação Chatwoot
# true: opção padrão, permite cadastros
# false: desabilita todos os endpoints relacionados a cadastros
# api_only: desabilita a UI para cadastro, mas você pode criar cadastros via APIs de conta
ENABLE_ACCOUNT_SIGNUP=true

# Configurações do Redis
# Especifique as configurações via uma única URL ou variáveis individuais
# ref: https://www.iana.org/assignments/uri-schemes/prov/redis
# Você também pode usar o seguinte formato para a URL: redis://:password@host:port/db_number
# Ajustado para usar o serviço Redis dentro do Docker Compose, que estará disponível como 'redis' na rede Docker.
REDIS_URL=redis://redis:6379

# Se você estiver usando docker-compose, defina o valor desta variável como uma string,
# que será a senha para o serviço redis em execução dentro do docker-compose
# para torná-lo seguro.
# Importante: Defina uma senha forte aqui. Ela deve corresponder à senha esperada pelo serviço Redis.
REDIS_PASSWORD=uma_senha_muito_forte_aqui_123! # <--- **IMPORTANTE: TROQUE POR UMA SENHA ÚNICA E SEGURA!**

# Redis Sentinel pode ser usado passando uma lista de hosts e portas de sentinel, ex: sentinel_host1:port1,sentinel_host2:port2
REDIS_SENTINELS=
# O nome mestre do Redis sentinel é obrigatório ao usar sentinel, o valor padrão é "mymaster".
# Você pode encontrar a lista de mestres usando o comando "SENTINEL masters"
REDIS_SENTINEL_MASTER_NAME=

# Por padrão, o Chatwoot passará REDIS_PASSWORD como o valor da senha para os sentinels
# Use a seguinte variável de ambiente para personalizar senhas para sentinels.
# Use string vazia se os sentinels forem configurados sem senhas
# REDIS_SENTINEL_PASSWORD=

# Correção de quebra de Redis premium no heroku
# Habilite a seguinte configuração
# ref: https://github.com/chatwoot/chatwoot/issues/2420
# REDIS_OPENSSL_VERIFY_MODE=none

# Variáveis de configuração do Banco de Dados Postgres
# Você pode usar as variáveis separadas abaixo OU a DATABASE_URL.
# Se usar DATABASE_URL, comente as 4 linhas abaixo.
POSTGRES_DATABASE=chatwoot
POSTGRES_HOST=postgres
POSTGRES_USERNAME=postgres
POSTGRES_PASSWORD=BQef4IaVnba1M0IPWqja

# OU, use a DATABASE_URL. Comente as variáveis POSTGRES_ separadas acima se usar esta.
# IMPORTANTE: Garanta que esta URL corresponda às credenciais do seu serviço Postgres no compose.yml.
# O host 'postgres' se refere ao nome do serviço no Docker Compose.
# DATABASE_URL=postgresql://postgres:BQef4IaVnba1M0IPWqja@postgres:5432/chatwoot

RAILS_ENV=production
# Altera o limite de tempo limite de consulta do Postgres. O padrão é 14 segundos. Modifique apenas quando necessário.
# POSTGRES_STATEMENT_TIMEOUT=14s
RAILS_MAX_THREADS=5

# O e-mail do qual todos os e-mails de saída são enviados
# pode ser `email@seudominio.com` ou `Nome da Marca <email@seudominio.com>`
MAILER_SENDER_EMAIL=Chatwoot <mc.suporte@outlook.com>

# A chave de domínio SMTP é configurada para verificação HELO
SMTP_DOMAIN=chatwoot.com
# Defina o valor como "mailhog" se estiver usando docker-compose para ambientes de desenvolvimento,
# Defina o valor como "localhost" ou seu endereço SMTP em outros ambientes
# Se SMTP_ADDRESS estiver vazio, o Chatwoot tentará usar sendmail (postfix)
SMTP_ADDRESS=
SMTP_PORT=1025
SMTP_USERNAME=
SMTP_PASSWORD=
# plain,login,cram_md5
SMTP_AUTHENTICATION=
SMTP_ENABLE_STARTTLS_AUTO=true
# Pode ser: 'none', 'peer', 'client_once', 'fail_if_no_peer_cert', veja http://api.rubyonrails.org/classes/ActionMailer/Base.html
SMTP_OPENSSL_VERIFY_MODE=peer
# Comente as seguintes variáveis de ambiente se necessário pelo seu servidor SMTP
# SMTP_TLS=
# SMTP_SSL=
# SMTP_OPEN_TIMEOUT
# SMTP_READ_TIMEOUT

# E-mail de Entrada
# Este é o domínio definido para os e-mails de resposta quando a continuidade da conversa está habilitada
MAILER_INBOUND_EMAIL_DOMAIN=
# Defina este para o canal de entrada apropriado com relação aos e-mails recebidos
# Os valores possíveis são:
# relay para Exim, Postfix, Qmail
# mailgun para Mailgun
# mandrill para Mandrill
# postmark para Postmark
# sendgrid para Sendgrid
RAILS_INBOUND_EMAIL_SERVICE=
# Use um dos seguintes com base no serviço de entrada de e-mail
# Ref: https://edgeguides.rubyonrails.org/action_mailbox_basics.html
# Defina isso como uma senha de sua escolha e use-a no webhook de entrada
RAILS_INBOUND_EMAIL_PASSWORD=

MAILGUN_INGRESS_SIGNING_KEY=
MANDRILL_INGRESS_API_KEY=

# Criando suas instruções de webhook de entrada para Postmark e Sendgrid:
# Formato da URL do webhook de entrada:
#    https://actionmailbox:[SUA_RAILS_INBOUND_EMAIL_PASSWORD]@[SEU_CHATWOOT_DOMAIN.COM]/rails/action_mailbox/[RAILS_INBOUND_EMAIL_SERVICE]/inbound_emails
# Nota: Substitua os valores entre colchetes; não inclua os próprios colchetes.
# Exemplo: https://actionmailbox:mYRandomPassword3@chatwoot.example.com/rails/action_mailbox/postmark/inbound_emails
# Para Postmark
# Certifique-se de que a caixa de seleção 'Incluir conteúdo de e-mail bruto no payload JSON' esteja selecionada na seção de webhook de entrada.

# Armazenamento
ACTIVE_STORAGE_SERVICE=local

# Amazon S3
# documentação: https://www.chatwoot.com/docs/configuring-s3-bucket-as-cloud-storage
S3_BUCKET_NAME=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=

# Configurações de log
# Desative se quiser gravar logs em um arquivo
RAILS_LOG_TO_STDOUT=true
LOG_LEVEL=info
LOG_SIZE=500
# Configure esta variável de ambiente se quiser usar lograge em vez do logger do rails
#LOGRAGE_ENABLED=true

### Estas variáveis de ambiente são necessárias apenas se você estiver configurando canais de mídia social

# Facebook
# documentação: https://www.chatwoot.com/docs/facebook-setup
FB_VERIFY_TOKEN=
FB_APP_SECRET=
FB_APP_ID=

# https://developers.facebook.com/docs/messenger-platform/instagram/get-started#app-dashboard
IG_VERIFY_TOKEN=

# Twitter
# documentação: https://www.chatwoot.com/docs/twitter-app-setup
TWITTER_APP_ID=
TWITTER_CONSUMER_KEY=
TWITTER_CONSUMER_SECRET=
TWITTER_ENVIRONMENT=

# Integração com Slack
SLACK_CLIENT_ID=
SLACK_CLIENT_SECRET=

# Google OAuth
GOOGLE_OAUTH_CLIENT_ID=
GOOGLE_OAUTH_CLIENT_SECRET=
GOOGLE_OAUTH_CALLBACK_URL=

### Altere esta variável de ambiente apenas se estiver usando um aplicativo móvel personalizado
## Variáveis de ambiente do aplicativo móvel
IOS_APP_ID=L7YLMN4634.com.chatwoot.app
ANDROID_BUNDLE_ID=com.chatwoot.app

# https://developers.google.com/android/guides/client-auth (use keytool para imprimir a impressão digital na primeira seção)
ANDROID_SHA256_CERT_FINGERPRINT=AC:73:8E:DE:EB:56:EA:CC:10:87:02:A7:65:37:7B:38:D4:5D:D4:53:F8:3B:FB:D3:C6:28:64:1D:AA:08:1E:D8

### Smart App Banner
# https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html
# Você pode encontrar seu app-id em https://itunesconnect.apple.com
#IOS_APP_IDENTIFIER=1495796682

## Notificação Push
## Gere um novo valor de chave aqui: https://d3v.one/vapid-key-generator/
# VAPID_PUBLIC_KEY=
# VAPID_PRIVATE_KEY=
#
# para aplicativos móveis
# FCM_SERVER_KEY=

### Configurações de APM e Monitoramento de Erros
## Elastic APM
## https://www.elastic.co/guide/en/apm/agent/ruby/current/getting-started-rails.html
# ELASTIC_APM_SERVER_URL=
# ELASTIC_APM_SECRET_TOKEN=

## Sentry
# SENTRY_DSN=

## Scout
## https://scoutapm.com/docs/ruby/configuration
# SCOUT_KEY=SUACHAVE
# SCOUT_NAME=SEUNOMEDOAPP (Produção)
# SCOUT_MONITOR=true

## NewRelic
# https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/
# NEW_RELIC_LICENSE_KEY=
# Defina como true para permitir que o apm do newrelic envie logs.
# Isso está desativado por padrão.
# NEW_RELIC_APPLICATION_LOGGING_ENABLED=

## Datadog
## https://github.com/DataDog/dd-trace-rb/blob/master/docs/GettingStarted.md#environment-variables
# DD_TRACE_AGENT_URL=

# Chave de API MaxMindDB para baixar o banco de dados GeoLite2 City
# IP_LOOKUP_API_KEY=

## Configuração do Rack Attack
## Para prevenir e limitar requisições abusivas
# ENABLE_RACK_ATTACK=true
# RACK_ATTACK_LIMIT=300
# ENABLE_RACK_ATTACK_WIDGET_API=true
# Lista de IPs confiáveis separados por vírgulas que ignoram as regras de limitação do Rack Attack
# RACK_ATTACK_ALLOWED_IPS=127.0.0.1,::1,192.168.0.10

## Executando chatwoot como um servidor apenas de API
## Definir este valor como true desabilitará os endpoints do dashboard frontend
# CW_API_ONLY_SERVER=false

## Configuração Apenas para Desenvolvimento
# Se você quiser usar letter_opener para e-mails locais
# LETTER_OPENER=true
# Destinado a ser usado em github codespaces
# WEBPACKER_DEV_SERVER_PUBLIC=

# Se você quiser usar o aplicativo móvel oficial,
# as notificações serão retransmitidas através de um servidor Chatwoot
ENABLE_PUSH_RELAY_SERVER=true

# Chave de API do Stripe
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=

# Defina como true se você quiser fazer upload de arquivos para armazenamento em nuvem usando a URL assinada
# Certifique-se de seguir https://edgeguides.rubyonrails.org/active_storage_overview.html#cross-origin-resource-sharing-cors-configuration no armazenamento em nuvem após definir isso como true.
DIRECT_UPLOADS_ENABLED=

# Credenciais MS OAUTH
AZURE_APP_ID=
AZURE_APP_SECRET=

## Configurações avançadas
## Altere esses valores para ajustar o desempenho
# Controla a configuração de concorrência do sidekiq
# SIDEKIQ_CONCURRENCY=10

# Recursos com inteligência artificial
## Chave OpenAI
# OPENAI_API_KEY=

# Configurações relacionadas a manutenção/desempenho
# Defina como true se você quiser remover caixas de entrada de contatos obsoletas
# caixas de entrada de contatos sem conversas com mais de 90 dias serão removidas
# REMOVE_STALE_CONTACT_INBOX_JOB_STATUS=false
